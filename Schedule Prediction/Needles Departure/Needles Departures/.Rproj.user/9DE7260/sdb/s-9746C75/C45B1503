{
    "collab_server" : "",
    "contents" : "library(dplyr)\nlibrary(ggplot2)\nlibrary(zoo)\nlibrary(forecast)\nlibrary(xts)\nlibrary(ranger)\nlibrary(caret)\ndir = \"H:/Schedule Prediction/Needles Departure/Needles Departures/Needles_only_Code/+3 Day/Part 1 Files/\"\n\n#Data Processing\nplus3_dpt_data=readRDS(paste0(dir,'Proceesed_data_part2_3Day.RDS'))\n\n\n#Train Test Split\ntrain = plus3_dpt_data[plus3_dpt_data$Date < \"2017-05-16\", ]\ntest = plus3_dpt_data[plus3_dpt_data$Date >= \"2017-05-16\", ]\n\ntrain_charact <- colnames(plus3_dpt_data)[31:333]\ntrain_charact <- c(\"Bucket\",\"weekday\",train_charact)\n\n#Uncomment if use only one day test data\n#test = test[test$Date < \"2017-03-26\", ]\n\n#Defining mape and rmse functions\nmape <- function(y, yhat)\n  mean(abs((y - yhat)/y))\nrmse <- function(y, yhat)\n  sqrt(mean( (y-yhat)^2 , na.rm = TRUE ))\n\n\n#############Bucket mean for Deleted and Added Trains################################\n\ntrain_bucket_means <- train %>% group_by(Bucket) %>% summarise(Pred_Deleted = mean(ScheduledbutNeverCame),\n                                                               Pred_Added = mean(Camebutneverscheduled),\n                                                               Pred_East_Ratio_B = mean(East_Ratio))\ntest <- merge(test, train_bucket_means)\n\ntrain_Weekday_means <- train %>% group_by(weekday) %>% summarise(Pred_East_Ratio_W = mean(East_Ratio))\ntest <- merge(test, train_Weekday_means)\n\nWeekday_bucket_means <- train %>% group_by(weekday, Bucket) %>% summarise(Pred_East_Ratio_WB = mean(East_Ratio))\ntest <- merge(test, Weekday_bucket_means)\n\n\n##############Linear Regression for ON-SCHEDULE Trains#########################################\nfit <- lm(sameBucket ~ active * Bucket + weekday , data = train)\nfcast <- forecast(fit, newdata = test)\ntest$Pred_S0D0SB <- fcast$mean\n\n#Accuracy\nrms = rmse(test$Pred_S0D0SB,test$sameBucket)\nrms\n\n#RMSE by Bucket\naccuracy <- test %>% group_by(Bucket) %>% summarise(RMSE_S0D0SB = rmse(Pred_S0D0SB, sameBucket))\naccuracy$overall_rmse <- rms\n\n########################################################################################################\n######################Predict Delayed Variables#########################################################\n########################################################################################################\n\nmodels <- c(\"LTE_minus2_Early\", \"minus1_Early\", \"On_Time\",\"Plus1_Delay\",\"Plus2_Delay\", \"Plus3_Delay\",               \n           \"Plus4_Delay\",\"GTE_Plus5_Delay\")\ntrain$Early <- train$LTE_minus2_Early + train$minus1_Early\ntest$Early <- test$LTE_minus2_Early + test$minus1_Early\ntrain$Delay <- (train$Plus1_Delay + train$Plus2_Delay + train$Plus3_Delay +\n                  train$Plus4_Delay + train$GTE_Plus5_Delay)\ntest$Delay <- (test$Plus1_Delay + test$Plus2_Delay + test$Plus3_Delay +\n                 test$Plus4_Delay + test$GTE_Plus5_Delay)\nmodels <- c(models,\"Early\", \"Delay\")\n\nRMSE = c()\nfor (i in models){\nprint(i)\ntrain_dynamic <- train[,c(i, train_charact)]\nfit <- train(\n   as.formula(paste(i,\"~ .\"))\n  ,data = train_dynamic\n  ,method = \"ranger\"\n  ,trControl = trainControl(method=\"cv\", number = 5, allowParallel = TRUE, verbose = TRUE)\n  #,tuneGrid = expand.grid(mtry = 4)\n  ,importance = 'impurity'\n  ,min.node.size = 5\n  )\n#varImp(fit)\n#varinfo = as.data.frame(varImp(fit)[1])\n#accuracy\nfcast = predict(fit, test)\ntest[[paste0(\"Pred_\",i)]] <- fcast\nrms <- rmse(fcast, test[i])\nprint(rms)\nRMSE = c(RMSE, rms)\n}\n\naccuracy_rmse <- as.data.frame(models)\naccuracy_rmse$RMSE <- RMSE\n\n########################################################################################################\n#######################Modelling Pre - Posts#########################################################\n########################################################################################################\n\n\nmodels <- c(\"CameTodayScheduledEarlier\",\"CameTodayScheduledLater\" )\n\nRMSE = c()\nfor (i in models){\n  train_dynamic <- train[,c(i, train_charact)]\n  fit <- train(\n    as.formula(paste(i,\"~ .\"))\n    ,data = train_dynamic\n    ,method = \"ranger\"\n    ,trControl = trainControl(method=\"cv\", number = 5, allowParallel = TRUE, verbose = TRUE)\n    #,tuneGrid = expand.grid(mtry = c(3,4,5))\n    ,importance = 'impurity'\n    ,min.node.size = 5\n    ,num.trees = 30\n  )\n  #varImp(fit)\n  #varinfo = as.data.frame(varImp(fit)[1])\n  #accuracy\n  fcast = predict(fit, test)\n  test[[paste0(\"Pred_\",i)]] <- fcast\n  rms <- rmse(fcast, test[i])\n  print(rms)\n  RMSE = c(RMSE, rms)\n}\n\ntemp <- as.data.frame(models)\ntemp$RMSE <- RMSE\n\naccuracy_rmse <- rbind(accuracy_rmse, temp)\n\n# #######################Modelling Pre - Posts- Bucketed#########################################################\n# \n# models <- colnames(plus3_dpt_data)[24:30]\n# \n# RMSE = c()\n# j=24\n# for (i in models){\n#   train_dynamic <- train[,c(3,5,j,31:310)]\n#   fit <- train(\n#     as.formula(paste(i,\"~ .\"))\n#     ,data = train_dynamic\n#     ,method = \"ranger\"\n#     ,trControl = trainControl(method=\"cv\", number = 5, allowParallel = TRUE, verbose = TRUE)\n#     #,tuneGrid = expand.grid(mtry = c(3,4,5))\n#     ,importance = 'impurity'\n#     ,min.node.size = 5\n#   )\n#   #varImp(fit)\n#   #varinfo = as.data.frame(varImp(fit)[1])\n#   #accuracy\n#   fcast = predict(fit, test)\n#   test[[paste0(\"Pred_\",i)]] <- fcast\n#   rms <- rmse(fcast, test[i])\n#   print(rms)\n#   RMSE = c(RMSE, rms)\n#   j = j+1\n# }\n# \n# temp <- as.data.frame(models)\n# temp$RMSE <- RMSE\n# \n# accuracy_rmse <- rbind(accuracy_rmse, temp)\n\n########################################################################################################\n#Final Model\npredict <- c(\"Date\",\"Bucket\",\"active\",\"actuals\",\"Pred_Deleted\",\"Pred_Added\",\"Pred_S0D0SB\",\n             \"Pred_LTE_minus2_Early\",\"Pred_minus1_Early\",\"Pred_On_Time\" ,\"Pred_Plus1_Delay\",\n             \"Pred_Plus2_Delay\",\"Pred_Plus3_Delay\",\"Pred_Plus4_Delay\" ,\"Pred_GTE_Plus5_Delay\",\n             \"Pred_Early\",\"Pred_Delay\",\n             \"Pred_CameTodayScheduledEarlier\",\"Pred_CameTodayScheduledLater\",\n             \"East_bound\",\"Pred_East_Ratio_B\", \"Pred_East_Ratio_W\", \"Pred_East_Ratio_WB\" )\n\nFinal <- test[, predict] \nFinal <- Final[with(Final, order(Date, Bucket)), ]\nnames(Final)\n\n###############################################################################################\n##########PRE_POST from EARLY_DELAY############################################################\n# Final$POST <- (lag(Final$Pred_LTE_minus2_Early,1)\n#                + lag(Final$Pred_minus1_Early,2))\n# Final$PRE <- (lead(Final$Pred_Plus1_Delay,1)\n#                + lead(Final$Pred_Plus2_Delay,2)\n#                + lead(Final$Pred_Plus3_Delay,3)\n#                + lead(Final$Pred_Plus4_Delay,4)\n#                + lead(Final$Pred_GTE_Plus5_Delay,5))\n# Final[is.na(Final$PRE), \"PRE\"] <- mean(Final$PRE, na.rm = TRUE)\n# Final[is.na(Final$POST), \"POST\"] <- mean(Final$POST, na.rm = TRUE)\n# rms <- rmse(Final$PRE, test$CameTodayScheduledEarlier)\n# rms\n# rms <- rmse(Final$POST, test$CameTodayScheduledLater)\n# rms\n\n####################FINAL ANALYSIS#############################################################\nFinal$Pred_Deviation <-     round(\n                                Final$Pred_Added\n                              - Final$Pred_Deleted\n                              #PRE_POST Modelled\n                              + Final$Pred_CameTodayScheduledEarlier\n                              + Final$Pred_CameTodayScheduledLater\n                              #PRE_POST Bucketwise Modelled\n                              # + Final$Pred_LTE_minus2_Pre\n                              # + Final$Pred_Pre_minus1_Pre\n                              # + Final$Pred_Plus1_Post\n                              # + Final$Pred_Plus2_Post\n                              # + Final$Pred_Plus3_Post\n                              # + Final$Pred_Plus4_Post\n                              # + Final$Pred_GTE_Plus5_Post\n                              #PRE_POST from DELAY-EARLY\n                              # + Final$POST\n                              # + Final$PRE\n                              #EARLY_DELAY\n                              - Final$Pred_Early\n                              - Final$Pred_Delay\n                              #EARLY_DELAY Bucketwise\n                              # - Final$Pred_LTE_minus2_Early\n                              # - Final$Pred_minus1_Early\n                              # - Final$Pred_Plus1_Delay\n                              # - Final$Pred_Plus2_Delay\n                              # - Final$Pred_Plus3_Delay\n                              # - Final$Pred_Plus4_Delay\n                              # - Final$Pred_GTE_Plus5_Delay\n                            )\nFinal$Pred_Actuals <- Final$active + Final$Pred_Deviation \nnames(Final)\n#Final <-Final[, c(1:4,ncol(Final)-1, ncol(Final))]\n\ncor(Final$actuals, Final[,c(3,ncol(Final)-1, ncol(Final))])\nrmse(Final$actuals, Final$active)\nrmse(Final$actuals, Final$Pred_Actuals)\n\n\n#East Bound Analysis\nFinal$Pred_East_Bound_B = round(Final$Pred_East_Ratio_B * Final$Pred_Actuals)\nFinal$Pred_East_Bound_W = round(Final$Pred_East_Ratio_W * Final$Pred_Actuals)\nFinal$Pred_East_Bound_WB = round(Final$Pred_East_Ratio_WB * Final$Pred_Actuals)\ncor(Final$East_bound, Final$Pred_East_Bound_B)\nrmse(Final$East_bound, Final$Pred_East_Bound_B)\ncor(Final$East_bound, Final$Pred_East_Bound_W)\nrmse(Final$East_bound, Final$Pred_East_Bound_W)\ncor(Final$East_bound, Final$Pred_East_Bound_WB)\nrmse(Final$East_bound, Final$Pred_East_Bound_WB)\n\n\n\n#write.csv(Final, \"Final_3Day_neeOnly.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n########################  Appendix ######################################################################\nwrite.csv(Final, paste0(dir,\"test_results.csv\"))\n\n#Bucketwise modelling\n# rmse_bucketwise_modelled = c()\n# Bucket = c()\n# for (i in unique(train$Bucket)){\n# train_bucket <- train[train$Bucket == i,]\n# test_bucket <- test[test$Bucket == i,]\n# fit_bucketwise <- lm(sameBucket ~ active + weekday, data = train_bucket)\n# fcast <- forecast(fit_bucketwise, newdata = test_bucket)\n# test_bucket$Pred_S0D0SB <- fcast$mean\n# rmse_bucketwise_modelled = c(rmse_bucketwise_modelled, rmse(test_bucket$Pred_S0D0SB, test_bucket$sameBucket))\n# Bucket = c(Bucket, i)\n# }\n# temp = as.data.frame(Bucket)\n# temp$rmse_bucketwise_modelled <- rmse_bucketwise_modelled\n# temp$id  <- 1:nrow(temp)\n# temp = merge(temp, temp1)\n# temp = temp[order(temp$id),]\n\n#timeseries method\n#train_S0D0SB <- xts(train$Sch_0_Dpt_0_Same_Bkt,train$TS_Bucket)\n#train_Active <- xts(train$InACtive,train$TS_Bucket)\n#test_Active <- xts(test$InACtive,test$TS_Bucket)\n#fit5=auto.arima(y=train_S0D0SB, xreg=train_Active)\n#fcast <- forecast(fit5, h=6, xreg = test_Active)\n#temp <- data_frame(fcast$mean)\n#temp$TS_Bucket <- test$TS_Bucket\n#colnames(temp) <- c(\"Pred_S0D0SB\", \"TS_Bucket\")\n#test <- merge(test, temp)\n\n# split_Act <- plus3_dpt_data[,c(2,3,5,4,9,6,7,16:23,14,15)]\n# \n# split_Act$Delay_Early <-   (split_Act$LTE_minus2_Early\n#                             + split_Act$minus1_Early\n#                             + split_Act$Plus1_Delay \n#                             + split_Act$Plus2_Delay\n#                             + split_Act$Plus3_Delay\n#                             + split_Act$Plus4_Delay\n#                             + split_Act$GTE_Plus5_Delay)\n# split_Act <- split_Act[,c(1:7,16,17,18)]\n# split_Act$pred <- (split_Act$active\n#                    - split_Act$ScheduledbutNeverCame\n#                    + split_Act$Camebutneverscheduled\n#                    + split_Act$CameTodayScheduledEarlier\n#                    + split_Act$CameTodayScheduledLater\n#                    - split_Act$Delay_Early)\n# \n# \n\n",
    "created" : 1495631706622.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3523154478",
    "id" : "C45B1503",
    "lastKnownWriteTime" : 1495634377,
    "last_content_update" : 1495634377219,
    "path" : "H:/Schedule Prediction/Needles Departure/Needles Departures/Needles_only_Code/+3 Day/Prediction_Needles.R",
    "project_path" : "Needles_only_Code/+3 Day/Prediction_Needles.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}